name: Create and publish a Docker image

on:
  release:
    types: [released, prereleased]

env:
  PROJECT_NAME: pokenini-resources
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_TAG_SUFFIXE: ${{ github.event.release.prerelease && '-prerelease' || '-release' }}
  VERSION: ${GITHUB_REF#refs/tags/}${{ github.event.release.prerelease && '-prerelease' || '-release' }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: | 
            latest=auto
            prefix=
            suffix=${{ env.IMAGE_TAG_SUFFIXE }},onlatest=true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Get tag and release status
        run: |
          echo "${{ env.VERSION }}" > ./resources/metadata/version
          cat ./resources/metadata/version

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./.docker/web/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref={{ env.PROJECT_NAME }}:latest${{ env.IMAGE_TAG_SUFFIXE }}
          cache-to: type=inline
